class Solution {
public:

  int solve(int index, int amount, vector<int>& coins, vector<vector<int>>& mem) {
    
    if (index == 0) {
      if (amount % coins[index] == 0) {
        return amount / coins[index];
      }
      return 1e9;
    }

    if (mem[index][amount] != -1) {
      return mem[index][amount];
    }

    int notTake = 0 + solve(index - 1, amount, coins, mem);
    int take = INT_MAX;
    if (coins[index] <= amount) {
      take = 1 + solve(index, amount - coins[index], coins, mem);
    }
    mem[index][amount] = min(notTake, take);
    return min(notTake, take);
  }

  int coinChange(vector<int>& coins, int amount) {
    int n = coins.size()-1;
    vector<vector<int>> mem(n + 1, vector<int>(amount + 1, -1));
    int ans = solve(n, amount, coins, mem);
    if (ans == 1e9) {
      return -1;
    }
    return ans;
  }
};