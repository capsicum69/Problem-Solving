class Solution {
public:
  int largestPathValue(string colors, vector<vector<int>>& edges) {
    int n = colors.size();
    vector<vector<int>> mtx(n, vector<int>(26, 0));

    vector<int> adjList[n];
    vector<int> indegree(n, 0);

    for (auto& edge: edges) {
      int u = edge[0];
      int v = edge[1];

      adjList[u].push_back(v);
      indegree[v]++;
    }

    queue<int> q;
    for (int i = 0; i < n; i++) {
      if (indegree[i] == 0) {
        q.push(i);
        mtx[i][colors[i] - 'a'] = 1;
      }
    }

    int ans = 0;
    int countNodes = 0;

    while (!q.empty()) {
      int node = q.front();
      q.pop();
      countNodes++;
      ans = max(ans, mtx[node][colors[node] - 'a']);

      for (int adj: adjList[node]) {
        for (int i = 0; i < 26; i++) {

          if (i == colors[adj] - 'a') {
            mtx[adj][i] = max(mtx[adj][i], mtx[node][i] + 1);
          } else {
            mtx[adj][i] = max(mtx[adj][i], mtx[node][i]);
          }
        }
        indegree[node]--;
        if (indegree[node] == 0) {
          q.push(node);
        }
      }

    }

    return countNodes != n ? -1 : ans;
  }
};
